export PATH="/usr/local/bin:/opt/local/bin/:/usr/local/sbin:/usr/local/mysql/bin:/usr/local/pgsql/bin:$PATH"
export PATH=$HOME/bin:$PATH
export PATH=$HOME/.composer/vendor/bin:$PATH
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
# export EDITOR="/usr/bin/vim"
export EDITOR=/usr/local/bin/mvim
export LC_CTYPE=en_US.UTF-8
export DEV=$HOME/proyectos
export DEV_DIR=$HOME/proyectos
export PG_USERNAME=fernando
export PG_HOST=localhost
export PG_PASSWORD=
export CKAN_ROOT=$DEV_DIR/ckan_local_root

# Load private environment variables
if [ -f ~/.env ]; then
  source ~/.env
fi

# Utilities
alias v="mvim"
alias todob='v /Users/fernando/Dropbox/Documentos/trabajo/todo-big.md'
alias todos='v /Users/fernando/Dropbox/Documentos/trabajo/todo-small.md'
alias gftrade='v /Users/fernando/Dropbox/Documentos/trabajo/gftrade.md'
alias opendch='v /Users/fernando/Dropbox/Documentos/trabajo/opendch.md'
alias ll='ls -lha'
alias lssh='less ~/.ssh/config'

# Development
alias tld='tail -f log/development.log'
alias tlt='tail -f log/test.log'
alias server='php -S localhost:8000'
alias br='bundle exec rake'
alias bjs='bundle exec jekyll s'
alias t='touch tmp/restart.txt'
alias cop='rubocop `git diff --diff-filter=d --name-only master..HEAD`'
alias r='bundle exec rspec'
alias i18n='i18n-tasks normalize && i18n-tasks health && bin/rails i18n:js:export'
alias paloalto='rm -rf $HOME/Library/Application\ Support/PaloAltoNetworks/'

# Help
alias h_pg_restore='echo "pg_restore -c -x -O -d <db_name> <file_name>"'

# SSH
alias id_personal='ssh-add -D; ssh-add ~/.ssh/id_dsa'

# Git
alias p='git pull --rebase'
alias P='git push'
alias gcm='git checkout master'
alias gcs='git checkout staging'
alias gmm='git merge master'

# Capistrano
alias D='bundle exec cap production deploy'
alias S='bundle exec cap staging deploy'
# Mina
alias M='mina deploy'

[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion

source ~/.bin/git-completion.bash

export GIT_PS1_SHOWDIRTYSTATE='true'
# completion support for the github gem
complete -o default -o nospace -F _git gh

# Auto jump
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh

# Prompt
if [ -f /usr/local/share/gitprompt.sh ]; then
  # GIT_PROMPT_THEME=Default
  GIT_PROMPT_FETCH_REMOTE_STATUS=0
  GIT_PROMPT_THEME=Custom
  . /usr/local/share/gitprompt.sh
fi

# Rbenv
export RBENV_ROOT=/usr/local/var/rbenv
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# Nvm
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

find-up () {
    path=$(pwd)
    while [[ "$path" != "" && ! -e "$path/$1" ]]; do
        path=${path%/*}
    done
    echo "$path"
}

cdnvm(){
    cd "$@";
    nvm_path=$(find-up .nvmrc | tr -d '[:space:]')

    # If there are no .nvmrc file, use the default nvm version
    if [[ ! $nvm_path = *[^[:space:]]* ]]; then

        declare default_version;
        default_version=$(nvm version default);

        # If there is no default version, set it to `node`
        # This will use the latest version on your machine
        if [[ $default_version == "N/A" ]]; then
            nvm alias default node;
            default_version=$(nvm version default);
        fi

        # If the current version is not the default version, set it to use the default version
        if [[ $(nvm current) != "$default_version" ]]; then
            nvm use default;
        fi

        elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
        declare nvm_version
        nvm_version=$(<"$nvm_path"/.nvmrc)

        declare locally_resolved_nvm_version
        # `nvm ls` will check all locally-available versions
        # If there are multiple matching versions, take the latest one
        # Remove the `->` and `*` characters and spaces
        # `locally_resolved_nvm_version` will be `N/A` if no local versions are found
        locally_resolved_nvm_version=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')

        # If it is not already installed, install it
        # `nvm install` will implicitly use the newly-installed version
        if [[ "$locally_resolved_nvm_version" == "N/A" ]]; then
            nvm install "$nvm_version";
        elif [[ $(nvm current) != "$locally_resolved_nvm_version" ]]; then
            nvm use "$nvm_version";
        fi
    fi
}
alias cd='cdnvm'
